{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\nconst addCart = createAction(ADD_CART, cart => ({\n  cart\n}));\nconst setCart = createAction(SET_CART, cartList => ({\n  cartList\n}));\nconst loading = createAction(LOADING, isLoading => ({\n  isLoading\n}));\nconst deleteCart = createAction(DELETE_CART, postId => ({\n  postId\n}));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({\n  postId,\n  quantity\n}));\nconst initialState = {\n  cart_list: [],\n  carts_list: [],\n  postId: 0,\n  quantity: 0\n};\n\nconst addCardMiddleWare = (postId, quantity) => async (dispatch, getState) => {\n  console.log(postId, quantity);\n  api.post(`cart/:postId`, {\n    postId: postId,\n    quantity: quantity\n  }).then(res => {\n    console.log(res);\n    dispatch(addCart(res.data));\n  }).catch(err => {\n    console.log(err);\n  });\n}; // const addCardMiddleWare = (title, currentPrice, img, quantity) => {\n// \treturn (dispatch, { history }) => {\n// \t\tconsole.log('장바구니비동기요청');\n// \t\tconsole.log(title, quantity);\n// \t\tdispatch(loading(true));\n// \t\tapi\n// \t\t\t.post(`/cart/:postId`, {\n// \t\t\t\ttitle,\n// \t\t\t\tcurrentPrice,\n// \t\t\t\timg,\n// \t\t\t\tquantity,\n// \t\t\t})\n// \t\t\t.then(res => {\n// \t\t\t\t// const products = res.data.post;\n// \t\t\t\t// dispatch(addCart(products));\n// \t\t\t\tdispatch(loading(false));\n// \t\t\t\talert('장바구니에 상품을 담았습니다!');\n// \t\t\t})\n// \t\t\t.catch(err => {\n// \t\t\t\tconsole.log(err.response);\n// \t\t\t\tif (err.response.statusText === 'Unauthorized') {\n// \t\t\t\t\talert('오류로 인하여 장바구니에 상품을 담을 수 없습니다!');\n// \t\t\t\t\tdispatch(loading(false));\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\talert(err.response.data.msg);\n// \t\t\t\tdispatch(loading(false));\n// \t\t\t});\n// \t};\n// };\n\n\nconst getCartAPI = () => async (dispatch, getState) => {\n  api.get(\"cart\").then(res => {\n    console.log(res);\n    const cart_data = res.data.carts;\n    console.log(cart_data);\n    let cart_list = [];\n    cart_data.forEach(doc => {\n      cart_list.push({\n        id: doc.id,\n        ...doc\n      });\n    });\n    dispatch(setCart(cart_list));\n  }).catch(err => {\n    console.log(err);\n  });\n}; // const getCartAPI = () => {\n// \treturn function (dispatch, getState, { history }) {\n// \t\t// getToken();\n// \t\tapi\n// \t\t\t.get(`/cart`)\n// \t\t\t.then(res => {\n// \t\t\t\tconsole.log(res);\n// \t\t\t\tdispatch(setCart(res.data.cartAllList));\n// \t\t\t})\n// \t\t\t.catch(err => {\n// \t\t\t\tconsole.log('err장바구니조회', err);\n// \t\t\t});\n// \t};\n// };\n//DELETE\n\n\nconst deleteCartMddleWares = postId => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    api.delete(`/cart/:postId`, {\n      postId\n    }).then(res => {\n      console.log(res);\n      dispatch(deleteCart(postId));\n    }).catch(err => {\n      console.log(err, '삭제에러임');\n    });\n  };\n};\n\nconst updateQuantity = (quantity, postId) => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    api.put(`/cart/:postId`, {\n      quantity,\n      postId\n    }).then(res => {\n      console.log(res);\n      dispatch(updateCart(postId, quantity));\n    }).catch(err => {\n      console.log(err.response);\n    });\n  };\n};\n\nexport default handleActions({\n  // [ADD_CART]: (state, action) =>\n  // \tproduce(state, draft => {\n  // \t\tdraft.list = action.payload.cart;\n  // \t\tdraft.isLoading = false;\n  // \t}),\n  [ADD_CART]: (state, action) => {\n    console.log(\"리듀서로 ADD_CART 가 도착했습니다.\");\n    const new_cart_list = [...state.list, action.payload.cart];\n    return { ...state,\n      carts_list: new_cart_list\n    };\n  },\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.isLoading = action.payload.isLoading;\n  }),\n  // [SET_CART]: (state, action) =>\n  // \tproduce(state, draft => {\n  // \t\tdraft.cart_list = action.payload.cart_list;\n  // \t}),\n  [SET_CART]: function () {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    console.log(\"LOAD_CART 리듀서로 도착했습니다\", state, action.payload);\n    return { ...state,\n      cart_list: action.payload.cartList\n    };\n  },\n  [DELETE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n    draft.cart_list.splice(idx, 1);\n  }),\n  [UPDATE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n    console.log('action.payload.quantity');\n    console.log(action.payload.quantity);\n    draft.cart_list[idx] = { ...draft.cart_list[idx],\n      quantity: action.payload.quantity\n    };\n  })\n}, initialState);\nconst actionCreators = {\n  addCardMiddleWare,\n  getCartAPI,\n  deleteCartMddleWares,\n  updateQuantity,\n  updateCart\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/redux/modules/cart.js"],"names":["createAction","handleActions","produce","api","ADD_CART","LOADING","SET_CART","DELETE_CART","UPDATE_CART","addCart","cart","setCart","cartList","loading","isLoading","deleteCart","postId","updateCart","quantity","initialState","cart_list","carts_list","addCardMiddleWare","dispatch","getState","console","log","post","then","res","data","catch","err","getCartAPI","get","cart_data","carts","forEach","doc","push","id","deleteCartMddleWares","history","delete","updateQuantity","put","response","state","action","new_cart_list","list","payload","draft","idx","findIndex","c","splice","p","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\n\nimport { api } from '../../shared/api';\n\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\n\nconst addCart = createAction(ADD_CART, cart => ({\n\tcart,\n}));\nconst setCart = createAction(SET_CART, cartList => ({ cartList }));\nconst loading = createAction(LOADING, isLoading => ({\n\tisLoading,\n}));\nconst deleteCart = createAction(DELETE_CART, postId => ({ postId }));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({\n\tpostId,\n\tquantity,\n}));\n\nconst initialState = {\n\tcart_list: [],\n\tcarts_list: [],\n\tpostId: 0,\n\tquantity: 0,\n};\n\nconst addCardMiddleWare = (postId, quantity) => async (dispatch, getState) => {\n\tconsole.log(postId, quantity);\n  \n\tapi\n\t  .post(`cart/:postId`, {\n\t\tpostId: postId,\n\t\tquantity: quantity,\n\t  })\n\t  .then((res) => {\n\t\tconsole.log(res);\n\t\tdispatch(addCart(res.data));\n\t  })\n\t  .catch((err) => {\n\t\tconsole.log(err);\n\t  });\n  };\n\n// const addCardMiddleWare = (title, currentPrice, img, quantity) => {\n// \treturn (dispatch, { history }) => {\n// \t\tconsole.log('장바구니비동기요청');\n// \t\tconsole.log(title, quantity);\n// \t\tdispatch(loading(true));\n// \t\tapi\n// \t\t\t.post(`/cart/:postId`, {\n// \t\t\t\ttitle,\n// \t\t\t\tcurrentPrice,\n// \t\t\t\timg,\n// \t\t\t\tquantity,\n// \t\t\t})\n// \t\t\t.then(res => {\n// \t\t\t\t// const products = res.data.post;\n// \t\t\t\t// dispatch(addCart(products));\n// \t\t\t\tdispatch(loading(false));\n// \t\t\t\talert('장바구니에 상품을 담았습니다!');\n// \t\t\t})\n// \t\t\t.catch(err => {\n// \t\t\t\tconsole.log(err.response);\n// \t\t\t\tif (err.response.statusText === 'Unauthorized') {\n// \t\t\t\t\talert('오류로 인하여 장바구니에 상품을 담을 수 없습니다!');\n// \t\t\t\t\tdispatch(loading(false));\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\talert(err.response.data.msg);\n// \t\t\t\tdispatch(loading(false));\n// \t\t\t});\n// \t};\n// };\n\nconst getCartAPI = () => async (dispatch, getState) => {\n\tapi\n\t  .get(\"cart\")\n\t  .then((res) => {\n\t\tconsole.log(res);\n\t\tconst cart_data = res.data.carts;\n\t\tconsole.log(cart_data);\n\t\tlet cart_list = [];\n  \n\t\tcart_data.forEach((doc) => {\n\t\t  cart_list.push({ id: doc.id, ...doc });\n\t\t});\n\t\tdispatch(setCart(cart_list));\n\t  })\n\t  .catch((err) => {\n\t\tconsole.log(err);\n\t  });\n  };\n\n// const getCartAPI = () => {\n// \treturn function (dispatch, getState, { history }) {\n// \t\t// getToken();\n// \t\tapi\n// \t\t\t.get(`/cart`)\n// \t\t\t.then(res => {\n// \t\t\t\tconsole.log(res);\n// \t\t\t\tdispatch(setCart(res.data.cartAllList));\n// \t\t\t})\n// \t\t\t.catch(err => {\n// \t\t\t\tconsole.log('err장바구니조회', err);\n// \t\t\t});\n// \t};\n// };\n\n//DELETE\nconst deleteCartMddleWares = postId => {\n\treturn function (dispatch, getState, { history }) {\n\t\tapi\n\t\t\t.delete(`/cart/:postId`, { postId })\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tdispatch(deleteCart(postId));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err, '삭제에러임');\n\t\t\t});\n\t};\n};\n\nconst updateQuantity = (quantity, postId) => {\n\treturn function (dispatch, getState, { history }) {\n\t\tapi\n\t\t\t.put(`/cart/:postId`, { quantity, postId })\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tdispatch(updateCart(postId, quantity));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t});\n\t};\n};\n\nexport default handleActions(\n\t{\n\t\t// [ADD_CART]: (state, action) =>\n\t\t// \tproduce(state, draft => {\n\t\t// \t\tdraft.list = action.payload.cart;\n\t\t// \t\tdraft.isLoading = false;\n\t\t// \t}),\n\t\t\n\t\t[ADD_CART]: (state, action) => {\n\t\t\tconsole.log(\"리듀서로 ADD_CART 가 도착했습니다.\");\n\t\t\tconst new_cart_list = [...state.list, action.payload.cart];\n\t  \n\t\t\treturn { ...state, carts_list: new_cart_list };\n\t\t  },\n\n\t\t[LOADING]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.isLoading = action.payload.isLoading;\n\t\t\t}),\n\t\t// [SET_CART]: (state, action) =>\n\t\t// \tproduce(state, draft => {\n\t\t// \t\tdraft.cart_list = action.payload.cart_list;\n\t\t// \t}),\n\t\t[SET_CART]: (state = initialState, action = {}) => {\n\t\t\tconsole.log(\"LOAD_CART 리듀서로 도착했습니다\", state, action.payload);\n\t\t\treturn { ...state, cart_list: action.payload.cartList };\n\t\t  },\n\t\t\n\n\t\t[DELETE_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tlet idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n\t\t\t\tdraft.cart_list.splice(idx, 1);\n\t\t\t}),\n\t\t[UPDATE_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tlet idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n\t\t\t\tconsole.log('action.payload.quantity');\n\t\t\t\tconsole.log(action.payload.quantity);\n\t\t\t\tdraft.cart_list[idx] = { ...draft.cart_list[idx], quantity: action.payload.quantity };\n\t\t\t}),\n\t},\n\tinitialState,\n);\n\nconst actionCreators = {\n\taddCardMiddleWare,\n\tgetCartAPI,\n\tdeleteCartMddleWares,\n\tupdateQuantity,\n\tupdateCart,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}