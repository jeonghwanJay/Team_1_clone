{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\nimport { setCookie } from '../../shared/Token';\nconst LOGIN = 'LOGIN';\nconst LOG_OUT = 'LOG_OUT';\nconst SET_USER = 'SET_USER';\nconst setUser = createAction(SET_USER, user => ({\n  user\n}));\nconst setLogin = createAction(LOGIN, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n}));\nconst initialState = {\n  user: [],\n  is_login: false\n}; // 회원가입\n\nconst signupAPI = (email, password, confirmpassword, name) => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    console.log('아이디', email);\n    console.log('비밀번호', password);\n    console.log('이름', name);\n    api.post('/user/join', {\n      email: email,\n      password: password,\n      confirmpassword: confirmpassword,\n      name: name\n    }).then(res => {\n      window.alert('회원가입이 되었습니다!');\n      history.push('/');\n    }).catch(err => {\n      console.log(err.response);\n\n      if (err.response.data.msg) {\n        alert(err.response.data.msg);\n      }\n    });\n  };\n}; // 로그인\n\n\nconst loginAPI = (email, password) => async (dispatch, getState, _ref2) => {\n  let {\n    history\n  } = _ref2;\n  api.post(\"/user/login\", {\n    email: email,\n    password: password\n  }).then(res => {\n    console.log(\"로그인성공\", res);\n    const _auth = res.data.token;\n    const _cookie = _auth;\n    setCookie(\"token\", _cookie, 7);\n    localStorage.setItem(\"token\", _cookie);\n    dispatch(setLogin({\n      email: email\n    }));\n    history.replace(\"/\");\n  }).catch(err => {\n    console.log(err);\n  });\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    dispatch(logOut());\n    history.replace('/');\n  };\n};\n\nconst isLogin = () => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const token = localStorage.getItem('token');\n    const userInfo = localStorage.getItem('userInfo');\n\n    if (!token || !userInfo) {\n      return false;\n    }\n\n    dispatch(setUser({\n      name: userInfo\n    }));\n  };\n}; // 리듀서\n\n\nexport default handleActions({\n  [LOGIN]: (state, action) => produce(state, draft => {\n    console.log(\"LOGIN 리듀서로 도착했습니다\", state, action.payload);\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [SET_USER]: (state, action) => produce(state, draft => {\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    draft.user = null;\n    draft.is_login = false;\n  })\n}, initialState);\nconst actionCreators = {\n  signupAPI,\n  loginAPI,\n  logout,\n  isLogin\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","api","setCookie","LOGIN","LOG_OUT","SET_USER","setUser","user","setLogin","logOut","initialState","is_login","signupAPI","email","password","confirmpassword","name","dispatch","getState","history","console","log","post","then","res","window","alert","push","catch","err","response","data","msg","loginAPI","_auth","token","_cookie","localStorage","setItem","replace","logout","removeItem","isLogin","getItem","userInfo","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\nimport { setCookie } from '../../shared/Token';\n\nconst LOGIN = 'LOGIN';\nconst LOG_OUT = 'LOG_OUT';\nconst SET_USER = 'SET_USER';\n\nconst setUser = createAction(SET_USER, user => ({ user }));\nconst setLogin = createAction(LOGIN, (user) => ({ user }));\nconst logOut = createAction(LOG_OUT, user => ({ user }));\n\nconst initialState = {\n\tuser: [],\n\tis_login: false,\n};\n\n\t// 회원가입\nconst signupAPI = (email, password, confirmpassword, name) => {\n\treturn function (dispatch, getState, { history }) {\n\n\t\tconsole.log('아이디', email);\n\t\tconsole.log('비밀번호', password);\n\t\tconsole.log('이름', name);\n\t\tapi\n\t\t\t.post('/user/join', {\n\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t\tconfirmpassword: confirmpassword,\n\t\t\t\tname: name,\n\t\t\t\t\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\twindow.alert('회원가입이 되었습니다!');\n\t\t\t\thistory.push('/');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t\tif (err.response.data.msg) {\n\t\t\t\t\talert(err.response.data.msg);\n\t\t\t\t}\n\t\t\t});\n\t};\n};\n\n\t// 로그인\nconst loginAPI =\n  (email, password) =>\n  async (dispatch, getState, { history }) => {\n    api\n      .post(\"/user/login\", {\n        email: email,\n        password: password,\n      })\n      .then((res) => {\n        console.log(\"로그인성공\", res);\n\n        const _auth = res.data.token;\n        const _cookie = _auth;\n\n        setCookie(\"token\", _cookie, 7);\n        localStorage.setItem(\"token\", _cookie);\n\n        dispatch(\n          setLogin({\n            email: email,\n          })\n        );\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n\t// 로그아웃\nconst logout = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('userInfo');\n\t\tdispatch(logOut());\n\t\thistory.replace('/');\n\t};\n};\n\nconst isLogin = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst userInfo = localStorage.getItem('userInfo');\n\n\t\tif (!token || !userInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tdispatch(\n\t\t\tsetUser({\n\t\t\t\tname: userInfo,\n\t\t\t}),\n\t\t);\n\t};\n};\n\n\t// 리듀서\nexport default handleActions(\n\t{\t\n\t\t[LOGIN]: (state, action) =>\n      \t\tproduce(state, (draft) => {\n        console.log(\"LOGIN 리듀서로 도착했습니다\", state, action.payload);\n        \t\tdraft.user = action.payload.user;\n\t\t\t\tdraft.is_login = true;\n      }),\n\t\t[SET_USER]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = action.payload.user;\n\t\t\t\tdraft.is_login = true;\n\t\t\t}),\n\t\t[LOG_OUT]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = null;\n\t\t\t\tdraft.is_login = false;\n\t\t\t}),\n\t},\n\tinitialState,\n);\n\nconst actionCreators = {\n\tsignupAPI,\n\tloginAPI,\n\tlogout,\n\tisLogin,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}