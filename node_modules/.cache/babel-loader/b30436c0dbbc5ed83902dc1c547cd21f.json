{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\nconst addCart = createAction(ADD_CART, cart => ({\n  cart\n}));\nconst setCart = createAction(SET_CART, cartList => ({\n  cartList\n}));\nconst loading = createAction(LOADING, isLoading => ({\n  isLoading\n}));\nconst deleteCart = createAction(DELETE_CART, postId => ({\n  postId\n}));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({\n  postId,\n  quantity\n}));\nconst initialState = {\n  cart_list: [],\n  list: [// {\n    // \ttitle: '[올리타리아] 엑스트라 버진 올리브유',\n    // \timg: 'https://img-cf.kurly.com/shop/data/goods/1587519777879l0.jpg',\n    // \tprice: 15000,\n    // },\n  ]\n};\n\nconst addCardMiddleWare = (postId, quantity) => {\n  return (dispatch, _ref) => {\n    let {\n      history\n    } = _ref;\n    console.log('장바구니비동기요청');\n    console.log(postId, quantity);\n    dispatch(loading(true));\n    api.post(`/cart/:postId`, {\n      // title,\n      // price,\n      // img,\n      quantity\n    }).then(res => {\n      // const products = res.data.post;\n      // dispatch(addCart(products));\n      dispatch(loading(false));\n      alert('장바구니에 상품을 담았습니다!');\n    }).catch(err => {\n      console.log(err.response);\n\n      if (err.response.statusText === 'Unauthorized') {\n        alert('로그인 후 이용해주세요.');\n        dispatch(loading(false));\n        return;\n      }\n\n      alert(err.response.data.msg);\n      dispatch(loading(false));\n    });\n  };\n};\n\nconst getCartAPI = () => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    // getToken();\n    api.get(`/carts`).then(res => {\n      console.log(res);\n      dispatch(setCart(res.data.cartAllList));\n    }).catch(err => {\n      console.log('err장바구니조회', err);\n    });\n  };\n}; //DELETE\n\n\nconst deleteCartMddleWares = postId => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    api.delete(`/carts`, {\n      postId\n    }).then(res => {\n      console.log(res);\n      dispatch(deleteCart(postId));\n    }).catch(err => {\n      console.log(err, '삭제에러임');\n    });\n  };\n};\n\nconst updateQuantity = (quantity, postId) => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    api.put(`/carts`, {\n      quantity,\n      postId\n    }).then(res => {\n      console.log(res);\n      dispatch(updateCart(postId, quantity));\n    }).catch(err => {\n      console.log(err.response);\n    });\n  };\n};\n\nexport default handleActions({\n  [ADD_CART]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.cart;\n    draft.isLoading = false;\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.isLoading = action.payload.isLoading;\n  }),\n  [SET_CART]: (state, action) => produce(state, draft => {\n    draft.cart_list = action.payload.cartList;\n  }),\n  [DELETE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n    draft.cart_list.splice(idx, 1);\n  }),\n  [UPDATE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n    console.log('action.payload.quantity');\n    console.log(action.payload.quantity);\n    draft.cart_list[idx] = { ...draft.cart_list[idx],\n      quantity: action.payload.quantity\n    };\n  })\n}, initialState);\nconst actionCreators = {\n  addCardMiddleWare,\n  getCartAPI,\n  deleteCartMddleWares,\n  updateQuantity,\n  updateCart\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/redux/modules/cart.js"],"names":["createAction","handleActions","produce","api","ADD_CART","LOADING","SET_CART","DELETE_CART","UPDATE_CART","addCart","cart","setCart","cartList","loading","isLoading","deleteCart","postId","updateCart","quantity","initialState","cart_list","list","addCardMiddleWare","dispatch","history","console","log","post","then","res","alert","catch","err","response","statusText","data","msg","getCartAPI","getState","get","cartAllList","deleteCartMddleWares","delete","updateQuantity","put","state","action","draft","payload","idx","findIndex","c","splice","p","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\n\nimport { api } from '../../shared/api';\n\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\n\nconst addCart = createAction(ADD_CART, cart => ({\n\tcart,\n}));\nconst setCart = createAction(SET_CART, cartList => ({ cartList }));\nconst loading = createAction(LOADING, isLoading => ({\n\tisLoading,\n}));\nconst deleteCart = createAction(DELETE_CART, postId => ({ postId }));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({\n\tpostId,\n\tquantity,\n}));\n\nconst initialState = {\n\tcart_list: [],\n\tlist: [\n\t\t// {\n\t\t// \ttitle: '[올리타리아] 엑스트라 버진 올리브유',\n\t\t// \timg: 'https://img-cf.kurly.com/shop/data/goods/1587519777879l0.jpg',\n\t\t// \tprice: 15000,\n\t\t// },\n\t],\n};\n\nconst addCardMiddleWare = (postId, quantity) => {\n\treturn (dispatch, { history }) => {\n\t\tconsole.log('장바구니비동기요청');\n\t\tconsole.log(postId, quantity);\n\t\tdispatch(loading(true));\n\t\tapi\n\t\t\t.post(`/cart/:postId`, {\n\t\t\t\t// title,\n\t\t\t\t// price,\n\t\t\t\t// img,\n\t\t\t\tquantity,\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\t// const products = res.data.post;\n\t\t\t\t// dispatch(addCart(products));\n\t\t\t\tdispatch(loading(false));\n\t\t\t\talert('장바구니에 상품을 담았습니다!');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t\tif (err.response.statusText === 'Unauthorized') {\n\t\t\t\t\talert('로그인 후 이용해주세요.');\n\t\t\t\t\tdispatch(loading(false));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\talert(err.response.data.msg);\n\t\t\t\tdispatch(loading(false));\n\t\t\t});\n\t};\n};\n\nconst getCartAPI = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\t// getToken();\n\t\tapi\n\t\t\t.get(`/carts`)\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tdispatch(setCart(res.data.cartAllList));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log('err장바구니조회', err);\n\t\t\t});\n\t};\n};\n\n//DELETE\nconst deleteCartMddleWares = postId => {\n\treturn function (dispatch, getState, { history }) {\n\t\tapi\n\t\t\t.delete(`/carts`, { postId })\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tdispatch(deleteCart(postId));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err, '삭제에러임');\n\t\t\t});\n\t};\n};\n\nconst updateQuantity = (quantity, postId) => {\n\treturn function (dispatch, getState, { history }) {\n\t\tapi\n\t\t\t.put(`/carts`, { quantity, postId })\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tdispatch(updateCart(postId, quantity));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t});\n\t};\n};\n\nexport default handleActions(\n\t{\n\t\t[ADD_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.list = action.payload.cart;\n\t\t\t\tdraft.isLoading = false;\n\t\t\t}),\n\t\t[LOADING]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.isLoading = action.payload.isLoading;\n\t\t\t}),\n\t\t[SET_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.cart_list = action.payload.cartList;\n\t\t\t}),\n\t\t[DELETE_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tlet idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n\t\t\t\tdraft.cart_list.splice(idx, 1);\n\t\t\t}),\n\t\t[UPDATE_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tlet idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n\t\t\t\tconsole.log('action.payload.quantity');\n\t\t\t\tconsole.log(action.payload.quantity);\n\t\t\t\tdraft.cart_list[idx] = { ...draft.cart_list[idx], quantity: action.payload.quantity };\n\t\t\t}),\n\t},\n\tinitialState,\n);\n\nconst actionCreators = {\n\taddCardMiddleWare,\n\tgetCartAPI,\n\tdeleteCartMddleWares,\n\tupdateQuantity,\n\tupdateCart,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}