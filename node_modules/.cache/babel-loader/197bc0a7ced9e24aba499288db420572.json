{"ast":null,"code":"import axios from 'axios';\nexport const api = axios.create({\n  baseURL: 'http://3.34.252.15' // \theaders: {\n  // \t\t'content-type': 'application/json;charset=UTF-8',\n  // \t\taccept: 'application/json',\n  // \t},\n  // },\n  // { withCredentials: true },\n\n});\n\nconst getToken = async () => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    return `Bearer ${token}`;\n  } else {\n    return null;\n  }\n}; // api.interceptors.request.use(async config => {\n// \tconfig.headers['Content-Type'] = 'application/json; charset=utf-8';\n// \tconfig.headers['X-Requested-With'] = 'XMLHttpRequest';\n// \tconfig.headers['Accept'] = '*/*';\n// \tconfig.headers['authorization'] = await getToken();\n// \treturn config;\n// });","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/shared/api.js"],"names":["axios","api","create","baseURL","getToken","token","localStorage","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAClB;AACCC,EAAAA,OAAO,EAAE,oBADV,CAEA;AACA;AACA;AACA;AACA;AACA;;AAPA,CADkB,CAAZ;;AAWP,MAAMC,QAAQ,GAAG,YAAY;AAC5B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACV,WAAQ,UAASA,KAAM,EAAvB;AACA,GAFD,MAEO;AACN,WAAO,IAAP;AACA;AACD,CAPD,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\n\nexport const api = axios.create(\n\t{\n\t\tbaseURL: 'http://3.34.252.15',\n\t// \theaders: {\n\t// \t\t'content-type': 'application/json;charset=UTF-8',\n\t// \t\taccept: 'application/json',\n\t// \t},\n\t// },\n\t// { withCredentials: true },\n\t});\n\nconst getToken = async () => {\n\tconst token = localStorage.getItem('token');\n\tif (token) {\n\t\treturn `Bearer ${token}`;\n\t} else {\n\t\treturn null;\n\t}\n};\n\n// api.interceptors.request.use(async config => {\n// \tconfig.headers['Content-Type'] = 'application/json; charset=utf-8';\n// \tconfig.headers['X-Requested-With'] = 'XMLHttpRequest';\n// \tconfig.headers['Accept'] = '*/*';\n// \tconfig.headers['authorization'] = await getToken();\n// \treturn config;\n// });"]},"metadata":{},"sourceType":"module"}