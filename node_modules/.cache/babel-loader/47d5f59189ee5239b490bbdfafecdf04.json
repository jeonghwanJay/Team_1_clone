{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\nconst addCart = createAction(ADD_CART, cart => ({\n  cart\n}));\nconst setCart = createAction(SET_CART, cartList => ({\n  cartList\n}));\nconst deleteCart = createAction(DELETE_CART, postId => ({\n  postId\n}));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({\n  postId,\n  quantity\n}));\nconst initialState = {\n  cart_list: [],\n  carts_list: [],\n  postId: 0,\n  quantity: 0\n}; //CREATE\n\nconst addCardMiddleWare = (postId, quantity) => async dispatch => {\n  console.log(postId, quantity);\n  api.post(`/cart/${postId}`, {\n    quantity: quantity\n  }).then(res => {\n    console.log(res);\n    dispatch(addCart(res.data));\n  }).catch(err => {\n    console.log(err);\n  });\n}; //READ\n\n\nconst getCartAPI = () => async dispatch => {\n  api.get(\"/cart/\").then(res => {\n    console.log(res);\n    const cart_data = res.data.carts;\n    console.log(cart_data);\n    let cart_list = [];\n    cart_data.forEach(doc => {\n      cart_list.push({\n        id: doc.id,\n        ...doc\n      });\n    });\n    dispatch(setCart(cart_list));\n  }).catch(err => {\n    console.log(err);\n  });\n}; //UPDATE\n\n\nconst updateQuantityP = (quantity, postId) => async dispatch => {\n  api.put(`/cart/inc/${postId}`, {}).then(res => {\n    console.log(res);\n    dispatch(updateCart(postId, quantity));\n  }).catch(err => {\n    console.log(err.response);\n  });\n};\n\nconst updateQuantityM = (quantity, postId) => async dispatch => {\n  api.put(`/cart/dec/${postId}`, {}).then(res => {\n    console.log(res);\n    dispatch(updateCart(postId, quantity));\n  }).catch(err => {\n    console.log(err.response);\n  });\n};\n\nconst deleteCartMddleWares = postId => async dispatch => {\n  api.delete(`/cart/${postId}`, {}).then(res => {\n    console.log(res);\n    dispatch(deleteCart(postId));\n  }).catch(err => {\n    console.log(err, '삭제에러임');\n  });\n}; //REDUCER\n\n\nexport default handleActions({\n  [ADD_CART]: (state, action) => {\n    console.log(\"리듀서로 ADD_CART 가 도착했습니다.\");\n    const new_cart_list = [...state.list, action.payload.cart];\n    return { ...state,\n      carts_list: new_cart_list\n    };\n  },\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.isLoading = action.payload.isLoading;\n  }),\n  [SET_CART]: function () {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    console.log(\"리듀서로 SET_CART 도착했습니다\", state, action.payload);\n    return { ...state,\n      cart_list: action.payload.cartList\n    };\n  },\n  [UPDATE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n    console.log('action.payload.quantity');\n    console.log(action.payload.quantity);\n    draft.cart_list[idx] = { ...draft.cart_list[idx],\n      quantity: action.payload.quantity\n    };\n  }),\n  [DELETE_CART]: (state, action) => produce(state, draft => {\n    let idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n    draft.cart_list.splice(idx, 1);\n  })\n}, initialState);\nconst actionCreators = {\n  addCardMiddleWare,\n  getCartAPI,\n  deleteCartMddleWares,\n  updateQuantityM,\n  updateQuantityP,\n  updateCart\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/redux/modules/cart.js"],"names":["createAction","handleActions","produce","api","ADD_CART","LOADING","SET_CART","DELETE_CART","UPDATE_CART","addCart","cart","setCart","cartList","deleteCart","postId","updateCart","quantity","initialState","cart_list","carts_list","addCardMiddleWare","dispatch","console","log","post","then","res","data","catch","err","getCartAPI","get","cart_data","carts","forEach","doc","push","id","updateQuantityP","put","response","updateQuantityM","deleteCartMddleWares","delete","state","action","new_cart_list","list","payload","draft","isLoading","idx","findIndex","p","c","splice","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\n\nimport { api } from '../../shared/api';\n\nconst ADD_CART = 'ADD_CART';\nconst LOADING = 'LOADING';\nconst SET_CART = 'SET_CART';\nconst DELETE_CART = 'DELETE_CART';\nconst UPDATE_CART = 'UPDATE_CART';\n\nconst addCart = createAction(ADD_CART, (cart) => ({ cart }));\nconst setCart = createAction(SET_CART, (cartList) => ({ cartList }));\nconst deleteCart = createAction(DELETE_CART, postId => ({ postId }));\nconst updateCart = createAction(UPDATE_CART, (postId, quantity) => ({postId,quantity}));\n\nconst initialState = {\n\tcart_list: [],\n\tcarts_list: [],\n\tpostId: 0,\n\tquantity: 0,\n};\n\n\t//CREATE\nconst addCardMiddleWare = (postId, quantity) => async (dispatch) => {\n\tconsole.log(postId, quantity);\n\tapi\n    .post(`/cart/${postId}`, {\n\t\tquantity: quantity,\n\t  })\n\n\t  .then((res) => {\n\t\tconsole.log(res);\n\t\tdispatch(addCart(res.data));\n\t  })\n\n\t  .catch((err) => {\n\t\tconsole.log(err);\n\t  });\n  };\n\n  \t//READ\nconst getCartAPI = () => async (dispatch) => {\n\tapi\n    .get(\"/cart/\")\n\n\t  .then((res) => {\n\t\tconsole.log(res);\n\t\tconst cart_data = res.data.carts;\n\t\tconsole.log(cart_data);\n\t\tlet cart_list = [];  \n\t\tcart_data.forEach((doc) => {\n\t\t  cart_list.push({ id: doc.id, ...doc });\n\t\t});\n\t\tdispatch(setCart(cart_list));\n\t  })\n\n\t  .catch((err) => {\n\t\tconsole.log(err);\n\t  });\n  };\n\n  \t//UPDATE\nconst updateQuantityP = (quantity, postId) => async (dispatch) => {\n\tapi\n\t\t.put(`/cart/inc/${postId}`, {\n\t\t\t\t})\n\n\t\t.then(res => {\n\t\t\tconsole.log(res);\n\t\t\tdispatch(updateCart(postId, quantity));\n\t\t})\n\n\t\t.catch(err => {\n\t\t\tconsole.log(err.response);\n\t\t});\n};\n\nconst updateQuantityM = (quantity, postId) => async (dispatch) => {\n\tapi\n\t\t.put(`/cart/dec/${postId}`, {\n\t\t\t\t})\n\n\t\t.then(res => {\n\t\t\tconsole.log(res);\n\t\t\tdispatch(updateCart(postId, quantity));\n\t\t})\n\n\t\t.catch(err => {\n\t\t\tconsole.log(err.response);\n\t\t});\n};\n\nconst deleteCartMddleWares = (postId) => async (dispatch) => {\n\tapi\n\t\t.delete(`/cart/${postId}`, { \n\t\t \t\t})\n\n\t\t.then(res => {\n\t\t\tconsole.log(res);\n\t\t\tdispatch(deleteCart(postId));\n\t\t})\n\n\t\t.catch(err => {\n\t\t\tconsole.log(err, '삭제에러임');\n\t\t});\n};\n\n\t//REDUCER\nexport default handleActions(\n\t{\n\t\t[ADD_CART]: (state, action) => {\n\t\t\tconsole.log(\"리듀서로 ADD_CART 가 도착했습니다.\");\n\t\t\tconst new_cart_list = [...state.list, action.payload.cart];\n\t  \n\t\t\treturn { ...state, carts_list: new_cart_list };\n\t\t  },\n\t\t\n\t\t[LOADING]: (state, action) =>\n\t\t  produce(state, draft => {\n\t\t\t  draft.isLoading = action.payload.isLoading;\n\t\t}),\n\n\t\t[SET_CART]: (state = initialState, action = {}) => {\n\t\t\tconsole.log(\"리듀서로 SET_CART 도착했습니다\", state, action.payload);\n\t\t\treturn { ...state, cart_list: action.payload.cartList };\n\t\t  },\n\t\t\n\t\t[UPDATE_CART]: (state, action) =>\n\t\tproduce(state, draft => {\n\t\t\tlet idx = draft.cart_list.findIndex(p => p.postId === action.payload.postId);\n\t\t\tconsole.log('action.payload.quantity');\n\t\t\tconsole.log(action.payload.quantity);\n\t\t\tdraft.cart_list[idx] = { ...draft.cart_list[idx], quantity: action.payload.quantity };\n\t\t}),\n\n\t\t[DELETE_CART]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tlet idx = draft.cart_list.findIndex(c => c.postId === action.payload.postId);\n\t\t\t\tdraft.cart_list.splice(idx, 1);\n\t\t\t}),\t\t\n\t},\n\tinitialState,\n);\n\nconst actionCreators = {\n\taddCardMiddleWare,\n\tgetCartAPI,\n\tdeleteCartMddleWares,\n\tupdateQuantityM,\n\tupdateQuantityP,\n\tupdateCart,\n\t\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}