{"ast":null,"code":"// 첫째,createAction와 handleActions는 Action과 리듀서를 편하게 만들어준다.\nimport { createAction, handleActions } from 'redux-actions'; // 둘째, immer를 가지고와야 불변성관리가 편하다.\n\nimport { produce } from 'immer';\nimport { api } from '../../shared/api'; // 2. actions(액션타입)\n// 첫째, 로그아웃 정보를 가지고 온다.\n\nconst LOG_OUT = 'LOG_OUT'; // 둘째, 유저정보를 가져온다.\n\nconst SET_USER = 'SET_USER'; // 3. action creator(액션 생성 함수들)\n// 첫째, createAction사용해서 LOG_IN타입을 넘겨준다. ()안에는 파라미터 값 즉 정보를 주고 user값을 넘겨준다.\n\nconst setUser = createAction(SET_USER, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n})); // 4. initialState(초기값)을 잡아준다.\n\nconst initialState = {\n  user: null,\n  is_login: false\n}; // 회원가입\n\nconst signupAPI = (email, password, confirmpassword, name) => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    // console.log('아이디', id);\n    // console.log('비밀번호', pw);\n    // console.log('비밀번호확인', passwordConfirm);\n    // console.log('이메일', email);\n    // console.log('이름', name);\n    console.log('아이디', email);\n    console.log('비밀번호', password); // console.log('비밀번호확인', pwCheck);\n\n    console.log('이름', name);\n    api.post('/user/join', {\n      // userId: id,\n      // password: pw,\n      // passwordConfirm: passwordConfirm,\n      // email: email,\n      // name: name,\n      email: email,\n      password: password,\n      confirmpassword: confirmpassword,\n      // pwCheck: pwCheck,\n      name: name\n    }).then(res => {\n      window.alert('회원가입이 되었습니다!');\n      history.push('/');\n    }).catch(err => {\n      console.log(err.response);\n\n      if (err.response.data.msg) {\n        alert(err.response.data.msg);\n      }\n    });\n  };\n}; // 로그인\n\n\nconst loginAPI = (email, password) => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    console.log(email, password);\n    api.post('/user/login', {\n      // userId: id,\n      // password: pw,\n      email: email,\n      password: password\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem('token', res.data.token);\n      const base64Payload = res.data.token.split('.')[1];\n      const payload = Buffer.from(base64Payload, 'base64');\n      const result = JSON.parse(payload.toString());\n      localStorage.setItem('userInfo', result.userId);\n      dispatch(setUser({\n        name: result.userId\n      }));\n      history.push('/');\n    }).catch(err => {\n      alert(err.response.data.msg);\n    });\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    dispatch(logOut());\n    history.replace('/');\n  };\n};\n\nconst isLogin = () => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const token = localStorage.getItem('token');\n    const userInfo = localStorage.getItem('userInfo');\n\n    if (!token || !userInfo) {\n      return false;\n    }\n\n    dispatch(setUser({\n      name: userInfo\n    }));\n  };\n}; // 5. reducer(리듀서)\n\n\nexport default handleActions({\n  [SET_USER]: (state, action) => produce(state, draft => {\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    draft.user = null;\n    draft.is_login = false;\n  })\n}, initialState); // 6. action creator export\n// 액션생성함수를 내보낸다.\n\nconst actionCreators = {\n  signupAPI,\n  loginAPI,\n  logout,\n  isLogin\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/clone_mk/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","api","LOG_OUT","SET_USER","setUser","user","logOut","initialState","is_login","signupAPI","email","password","confirmpassword","name","dispatch","getState","history","console","log","post","then","res","window","alert","push","catch","err","response","data","msg","loginAPI","localStorage","setItem","token","base64Payload","split","payload","Buffer","from","result","JSON","parse","toString","userId","logout","removeItem","replace","isLogin","getItem","userInfo","state","action","draft","actionCreators"],"mappings":"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","sourcesContent":["// 첫째,createAction와 handleActions는 Action과 리듀서를 편하게 만들어준다.\nimport { createAction, handleActions } from 'redux-actions';\n// 둘째, immer를 가지고와야 불변성관리가 편하다.\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\n\n// 2. actions(액션타입)\n// 첫째, 로그아웃 정보를 가지고 온다.\nconst LOG_OUT = 'LOG_OUT';\n// 둘째, 유저정보를 가져온다.\nconst SET_USER = 'SET_USER';\n\n// 3. action creator(액션 생성 함수들)\n// 첫째, createAction사용해서 LOG_IN타입을 넘겨준다. ()안에는 파라미터 값 즉 정보를 주고 user값을 넘겨준다.\nconst setUser = createAction(SET_USER, user => ({ user }));\nconst logOut = createAction(LOG_OUT, user => ({ user }));\n\n// 4. initialState(초기값)을 잡아준다.\nconst initialState = {\n\tuser: null,\n\tis_login: false,\n};\n\n// 회원가입\nconst signupAPI = (email, password, confirmpassword, name) => {\n\treturn function (dispatch, getState, { history }) {\n\t\t// console.log('아이디', id);\n\t\t// console.log('비밀번호', pw);\n\t\t// console.log('비밀번호확인', passwordConfirm);\n\t\t// console.log('이메일', email);\n\t\t// console.log('이름', name);\n\t\tconsole.log('아이디', email);\n\t\tconsole.log('비밀번호', password);\n\t\t// console.log('비밀번호확인', pwCheck);\n\t\tconsole.log('이름', name);\n\t\tapi\n\t\t\t.post('/user/join', {\n\t\t\t\t// userId: id,\n\t\t\t\t// password: pw,\n\t\t\t\t// passwordConfirm: passwordConfirm,\n\t\t\t\t// email: email,\n\t\t\t\t// name: name,\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t\tconfirmpassword: confirmpassword,\n\t\t\t\t// pwCheck: pwCheck,\n\t\t\t\tname: name,\n\t\t\t\t\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\twindow.alert('회원가입이 되었습니다!');\n\t\t\t\thistory.push('/');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t\tif (err.response.data.msg) {\n\t\t\t\t\talert(err.response.data.msg);\n\t\t\t\t}\n\t\t\t});\n\t};\n};\n\n// 로그인\nconst loginAPI = (email, password) => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconsole.log(email, password);\n\t\tapi\n\t\t\t.post('/user/login', {\n\t\t\t\t// userId: id,\n\t\t\t\t// password: pw,\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tlocalStorage.setItem('token', res.data.token);\n\t\t\t\tconst base64Payload = res.data.token.split('.')[1];\n\t\t\t\tconst payload = Buffer.from(base64Payload, 'base64');\n\t\t\t\tconst result = JSON.parse(payload.toString());\n\t\t\t\tlocalStorage.setItem('userInfo', result.userId);\n\t\t\t\tdispatch(\n\t\t\t\t\tsetUser({\n\t\t\t\t\t\tname: result.userId,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\thistory.push('/');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\talert(err.response.data.msg);\n\t\t\t});\n\t};\n};\n\n// 로그아웃\nconst logout = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('userInfo');\n\t\tdispatch(logOut());\n\t\thistory.replace('/');\n\t};\n};\n\nconst isLogin = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst userInfo = localStorage.getItem('userInfo');\n\n\t\tif (!token || !userInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tdispatch(\n\t\t\tsetUser({\n\t\t\t\tname: userInfo,\n\t\t\t}),\n\t\t);\n\t};\n};\n\n// 5. reducer(리듀서)\nexport default handleActions(\n\t{\n\t\t[SET_USER]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = action.payload.user;\n\t\t\t\tdraft.is_login = true;\n\t\t\t}),\n\t\t[LOG_OUT]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = null;\n\t\t\t\tdraft.is_login = false;\n\t\t\t}),\n\t},\n\tinitialState,\n);\n\n// 6. action creator export\n// 액션생성함수를 내보낸다.\nconst actionCreators = {\n\tsignupAPI,\n\tloginAPI,\n\tlogout,\n\tisLogin,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}