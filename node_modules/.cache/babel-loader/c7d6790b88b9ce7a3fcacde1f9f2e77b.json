{"ast":null,"code":"// 리덕스\n// 1.import\n// 첫째,createAction와 handleActions는 Action과 리듀서를 편하게 만들어준다.\nimport { createAction, handleActions } from 'redux-actions'; // 둘째, immer를 가지고와야 불변성관리가 편하다.\n\nimport { produce } from 'immer';\nimport { api } from '../../shared/api'; // 2. actions(액션타입)\n// 첫째, 로그아웃 정보를 가지고 온다.\n\nconst LOG_OUT = 'LOG_OUT'; // 둘째, 유저정보를 가져온다.\n\nconst SET_USER = 'SET_USER'; // 3. action creator(액션 생성 함수들)\n// 첫째, createAction사용해서 LOG_IN타입을 넘겨준다. ()안에는 파라미터 값 즉 정보를 주고 user값을 넘겨준다.\n\nconst setUser = createAction(SET_USER, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n})); // 4. initialState(초기값)을 잡아준다.\n\nconst initialState = {\n  user: null,\n  is_login: false\n}; // 회원가입\n\nconst signupAPI = (id, pw, passwordConfirm, email, name) => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    console.log('아이디', id);\n    console.log('비밀번호', pw);\n    console.log('비밀번호확인', passwordConfirm);\n    console.log('이메일', email);\n    console.log('이름', name);\n    api.post('/user/join', {\n      userId: id,\n      password: pw,\n      passwordConfirm: passwordConfirm,\n      email: email,\n      name: name\n    }).then(res => {\n      window.alert('회원가입이 되었습니다!');\n      history.push('/user/login');\n    }).catch(err => {\n      console.log(err.response);\n\n      if (err.response.data.msg) {\n        alert(err.response.data.msg);\n      }\n    });\n  };\n}; // 로그인\n\n\nconst loginAPI = (id, pw) => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    console.log(id, pw);\n    api.post('/user/login', {\n      userId: id,\n      password: pw\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem('token', res.data.token);\n      const base64Payload = res.data.token.split('.')[1];\n      const payload = Buffer.from(base64Payload, 'base64');\n      const result = JSON.parse(payload.toString());\n      localStorage.setItem('userInfo', result.userId);\n      dispatch(setUser({\n        name: result.userId\n      }));\n      history.push('page/main/new');\n    }).catch(err => {\n      alert(err.response.data.msg);\n    });\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    dispatch(logOut());\n    history.replace('page/main/new');\n  };\n};\n\nconst isLogin = () => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const token = localStorage.getItem('token');\n    const userInfo = localStorage.getItem('userInfo');\n\n    if (!token || !userInfo) {\n      return false;\n    }\n\n    dispatch(setUser({\n      name: userInfo\n    }));\n  };\n}; // 5. reducer(리듀서)\n\n\nexport default handleActions({\n  [SET_USER]: (state, action) => produce(state, draft => {\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    draft.user = null;\n    draft.is_login = false;\n  })\n}, initialState); // 6. action creator export\n// 액션생성함수를 내보낸다.\n\nconst actionCreators = {\n  signupAPI,\n  loginAPI,\n  logout,\n  isLogin\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeonghwan/Desktop/Clonemk/clone_mk/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","api","LOG_OUT","SET_USER","setUser","user","logOut","initialState","is_login","signupAPI","id","pw","passwordConfirm","email","name","dispatch","getState","history","console","log","post","userId","password","then","res","window","alert","push","catch","err","response","data","msg","loginAPI","localStorage","setItem","token","base64Payload","split","payload","Buffer","from","result","JSON","parse","toString","logout","removeItem","replace","isLogin","getItem","userInfo","state","action","draft","actionCreators"],"mappings":"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","sourcesContent":["\n   \n// 리덕스\n\n// 1.import\n// 첫째,createAction와 handleActions는 Action과 리듀서를 편하게 만들어준다.\nimport { createAction, handleActions } from 'redux-actions';\n// 둘째, immer를 가지고와야 불변성관리가 편하다.\nimport { produce } from 'immer';\nimport { api } from '../../shared/api';\n\n// 2. actions(액션타입)\n// 첫째, 로그아웃 정보를 가지고 온다.\nconst LOG_OUT = 'LOG_OUT';\n// 둘째, 유저정보를 가져온다.\nconst SET_USER = 'SET_USER';\n\n// 3. action creator(액션 생성 함수들)\n// 첫째, createAction사용해서 LOG_IN타입을 넘겨준다. ()안에는 파라미터 값 즉 정보를 주고 user값을 넘겨준다.\nconst setUser = createAction(SET_USER, user => ({ user }));\nconst logOut = createAction(LOG_OUT, user => ({ user }));\n\n// 4. initialState(초기값)을 잡아준다.\nconst initialState = {\n\tuser: null,\n\tis_login: false,\n};\n\n// 회원가입\nconst signupAPI = (id, pw, passwordConfirm, email, name) => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconsole.log('아이디', id);\n\t\tconsole.log('비밀번호', pw);\n\t\tconsole.log('비밀번호확인', passwordConfirm);\n\t\tconsole.log('이메일', email);\n\t\tconsole.log('이름', name);\n\t\tapi\n\t\t\t.post('/user/join', {\n\t\t\t\tuserId: id,\n\t\t\t\tpassword: pw,\n\t\t\t\tpasswordConfirm: passwordConfirm,\n\t\t\t\temail: email,\n\t\t\t\tname: name,\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\twindow.alert('회원가입이 되었습니다!');\n\t\t\t\thistory.push('/user/login');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err.response);\n\t\t\t\tif (err.response.data.msg) {\n\t\t\t\t\talert(err.response.data.msg);\n\t\t\t\t}\n\t\t\t});\n\t};\n};\n\n// 로그인\nconst loginAPI = (id, pw) => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconsole.log(id, pw);\n\t\tapi\n\t\t\t.post('/user/login', {\n\t\t\t\tuserId: id,\n\t\t\t\tpassword: pw,\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tlocalStorage.setItem('token', res.data.token);\n\t\t\t\tconst base64Payload = res.data.token.split('.')[1];\n\t\t\t\tconst payload = Buffer.from(base64Payload, 'base64');\n\t\t\t\tconst result = JSON.parse(payload.toString());\n\t\t\t\tlocalStorage.setItem('userInfo', result.userId);\n\t\t\t\tdispatch(\n\t\t\t\t\tsetUser({\n\t\t\t\t\t\tname: result.userId,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\thistory.push('page/main/new');\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\talert(err.response.data.msg);\n\t\t\t});\n\t};\n};\n\n// 로그아웃\nconst logout = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('userInfo');\n\t\tdispatch(logOut());\n\t\thistory.replace('page/main/new');\n\t};\n};\n\nconst isLogin = () => {\n\treturn function (dispatch, getState, { history }) {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst userInfo = localStorage.getItem('userInfo');\n\n\t\tif (!token || !userInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tdispatch(\n\t\t\tsetUser({\n\t\t\t\tname: userInfo,\n\t\t\t}),\n\t\t);\n\t};\n};\n\n// 5. reducer(리듀서)\nexport default handleActions(\n\t{\n\t\t[SET_USER]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = action.payload.user;\n\t\t\t\tdraft.is_login = true;\n\t\t\t}),\n\t\t[LOG_OUT]: (state, action) =>\n\t\t\tproduce(state, draft => {\n\t\t\t\tdraft.user = null;\n\t\t\t\tdraft.is_login = false;\n\t\t\t}),\n\t},\n\tinitialState,\n);\n\n// 6. action creator export\n// 액션생성함수를 내보낸다.\nconst actionCreators = {\n\tsignupAPI,\n\tloginAPI,\n\tlogout,\n\tisLogin,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}